#+TITLE: Filetags

A novel way to automatically organize your files via symlinks by "tagging" them with filename cookies.

* Purpose

Imagine that you're using a music DAW (Digital Audio Workstation) and want to mark several files as "favorite" so you can quickly come back to them later. Most DAWs don't provide such functionality, so the only realistic options are to either copy or move your favorite samples to a dedicated "favorites" directory. This is not very ideal. It can be very time-consuming and meticulous to move or copy files from one location to another, especially from within your DAW, if it even supports it.

So what if there was a way to automatically organize any arbitrary file to a dedicated directory, without any file duplication or moving? And without ever having to leave your DAW (or any application for that matter) for any of it?

This project seeks to solve exactly that, by automatically symlinking files with a matching filename substring/cookie to a specified directory.

So for example, if I find a sample that I really like, all I would need to do to tag it as a "favorite", would be to rename the file to include a filename cookie in regex, such as ="^_.*"= (a filename prefixed with an underscore) to automatically symlink that file to my "favorites" directory. Thus, streamlining this style of file organization by tenfold, and making this possible no matter the front-end, as long as it can rename files.

And because it's file-agnostic, it can be used to organize your photos, movies, documents, and anything else. As long as it's a file.

* How does it work?

It runs a daemon in the background that recursively monitors all files from a directory for changes in filename. When it observes such a change, it matches the filename against a specified filename cookie regex, and if it matches, it creates a symlink as appropriate.

TODO: more info.

* Features

- specify multiple "rules", where each rule specifies directories to monitor and directories to symlink to.
- broken symlinks are automatically deleted periodically.
- low memory footprint even with many files being watched.
- currently only supports Linux, but planning on adding support for other operating systems.

* To Do

- [ ] during post-serialization of config, create a copy of config with the rule-specific settings replaced with the defaults if none (or similar).
- [ ] go through all source code and rename all dest_dirs/dest_dir/dest to link_dirs/link_dir/link.
- [ ] refactor everything very freely without fear of painful compilation issues (it'll literally only take 2mins, always)

* Refactoring scratch

** Main

1. args, config_gen

2. init checks (ensure all source_dirs and link_dirs exist, creating them if needed)

3. start responder (the main place where events are processed)

4. run clean all inappropriate links in all link_dirs.

5. start periodic_link_cleaner

6. run test hook

7. wait until responder thread completes

** File tree

- channels/
  - actions/
    - symlinking.rs
    - cleaning.rs
  - responder.rs
  - senders.rs
- args.rs
- channels.rs
- config.rs
- lib.rs
- logger.rs
- main.rs
- utils.rs
